require_relative '../spec_helper.rb'

describe '{{ cookbook_name }}::accounts' do
  let(:chef_run) do
    ChefSpec::SoloRunner.new(platform: 'centos', version: '7.2.1511')
  end

  context 'User without home' do
    it 'creates the service account group and user' do
      chef_run.node.normal['{{ cookbook_name }}']['accounts'] = [{
        'name' => '{{ cookbook_name }}',
        'uid' => 501
      }]

      chef_run.converge(described_recipe)

      expect(chef_run).to create_group('{{ cookbook_name }}').with(gid: 501)
      expect(chef_run).not_to manage_group('{{ cookbook_name }}')
      expect(chef_run).not_to modify_group('{{ cookbook_name }}')
      expect(chef_run).not_to remove_group('{{ cookbook_name }}')

      expect(chef_run).to create_user('{{ cookbook_name }}').with(uid: 501)
      expect(chef_run).not_to manage_user('{{ cookbook_name }}')
      expect(chef_run).not_to modify_user('{{ cookbook_name }}')
      expect(chef_run).not_to remove_user('{{ cookbook_name }}')
      expect(chef_run).not_to lock_user('{{ cookbook_name }}')
      expect(chef_run).not_to unlock_user('{{ cookbook_name }}')
    end
  end

  context 'User with home' do
    it 'creates the service account group and user' do
      chef_run.node.normal['{{ cookbook_name }}']['accounts'] = [{
        'name' => '{{ cookbook_name }}',
        'uid' => 501,
        'home' => '/home/{{ cookbook_name }}'
      }]

      chef_run.converge(described_recipe)

      expect(chef_run).to create_group('{{ cookbook_name }}').with(gid: 501)
      expect(chef_run).not_to manage_group('{{ cookbook_name }}')
      expect(chef_run).not_to modify_group('{{ cookbook_name }}')
      expect(chef_run).not_to remove_group('{{ cookbook_name }}')

      expect(chef_run).to create_user('{{ cookbook_name }}').with(
        uid: 501, home: '/home/{{ cookbook_name }}'
      )
      expect(chef_run).not_to manage_user('{{ cookbook_name }}')
      expect(chef_run).not_to modify_user('{{ cookbook_name }}')
      expect(chef_run).not_to remove_user('{{ cookbook_name }}')
      expect(chef_run).not_to lock_user('{{ cookbook_name }}')
      expect(chef_run).not_to unlock_user('{{ cookbook_name }}')
    end
  end

  context 'User with managed home' do
    it 'creates the service account group and user' do
      chef_run.node.normal['{{ cookbook_name }}']['accounts'] = [{
        'name' => '{{ cookbook_name }}',
        'uid' => 501,
        'home' => '/home/{{ cookbook_name }}',
        'manage_home' => true
      }]

      chef_run.converge(described_recipe)

      expect(chef_run).to create_group('{{ cookbook_name }}').with(gid: 501)
      expect(chef_run).not_to manage_group('{{ cookbook_name }}')
      expect(chef_run).not_to modify_group('{{ cookbook_name }}')
      expect(chef_run).not_to remove_group('{{ cookbook_name }}')

      expect(chef_run).to create_user('{{ cookbook_name }}').with(
        uid: 501, home: '/home/{{ cookbook_name }}', manage_home: true
      )
      expect(chef_run).not_to manage_user('{{ cookbook_name }}')
      expect(chef_run).not_to modify_user('{{ cookbook_name }}')
      expect(chef_run).not_to remove_user('{{ cookbook_name }}')
      expect(chef_run).not_to lock_user('{{ cookbook_name }}')
      expect(chef_run).not_to unlock_user('{{ cookbook_name }}')
    end
  end
end
